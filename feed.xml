<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://crispindeity.github.io/</id><title>crispindeity</title><subtitle>개발자 지망생의 테크 블로그 입니다.</subtitle> <updated>2023-11-29T00:31:20+09:00</updated> <author> <name>Shin Hee-chul</name> <uri>https://crispindeity.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://crispindeity.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://crispindeity.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator> <rights> © 2023 Shin Hee-chul </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>(Spring)@ConfigurationProperties</title><link href="https://crispindeity.github.io/posts/(Spring)@ConfigurationProperties/" rel="alternate" type="text/html" title="(Spring)@ConfigurationProperties" /><published>2023-11-21T23:13:00+09:00</published> <updated>2023-11-21T23:27:33+09:00</updated> <id>https://crispindeity.github.io/posts/(Spring)@ConfigurationProperties/</id> <content src="https://crispindeity.github.io/posts/(Spring)@ConfigurationProperties/" /> <author> <name>crispin</name> </author> <category term="Spring" /> <summary> ‼️ Warning - 아래 모든 내용은 제가 공부하며, 작성한 내용이므로 잘못된 내용이 포함될 수 있습니다. - 잘못된 내용에 대해 댓글을 남겨주신다면 정말 감사드리겠습니다. 글 작성 이유 스프링을 공부하면서, 유저가 회원가입을 했을때 메일을 통한 인증 관련 로직을 보던 중 예전에 토이 프로젝트를 진행했을때 사용했던 @Value 어노테이션을 사용하여 yaml 또는 properties 파일에서 환경 변수 값을 가져오는게 아닌 다른 방식이 있어 정리 하고자 글 작성 @Value 우선 @Value 어노테이션에 대해 간략하게 알아보자. 간단한 예제 @Service @Transactional(readOnly = true) public class UserService { private f... </summary> </entry> <entry><title>(Algorithm)유클리드 호제법</title><link href="https://crispindeity.github.io/posts/(Algorithm)%EC%9C%A0%ED%81%B4%EB%A6%AC%EB%93%9C-%ED%98%B8%EC%A0%9C%EB%B2%95/" rel="alternate" type="text/html" title="(Algorithm)유클리드 호제법" /><published>2023-05-23T12:47:00+09:00</published> <updated>2023-05-23T12:47:00+09:00</updated> <id>https://crispindeity.github.io/posts/(Algorithm)%EC%9C%A0%ED%81%B4%EB%A6%AC%EB%93%9C-%ED%98%B8%EC%A0%9C%EB%B2%95/</id> <content src="https://crispindeity.github.io/posts/(Algorithm)%EC%9C%A0%ED%81%B4%EB%A6%AC%EB%93%9C-%ED%98%B8%EC%A0%9C%EB%B2%95/" /> <author> <name>crispin</name> </author> <category term="Algorithm" /> <summary> 유클리드 호제법? 두개의 자연수에 대한 최대 공약수를 구하는 알고리즘 원리 두 수의 자연수 x 와 y 에 대해 두 수를 나눈 나머지를 z 라고 했을때, x 와 y 의 최대 공약수는 y 와 z 의 최대 공약수와 같다. 위에 논리를 이용해서 x 와 y 의 나머지 z 를 구한 뒤 y 와 z 의 나머지 z' 를 구하여, y 와 z' 를 계속 나누다 나머지가 0 이 되는 순간의 z' 의 값이 최대 공약수 가 된다. 예 2, 16의 최대 공약수 1) 12 % 16 = 12 2) 16 % 12 = 4 3) 12 % 4 = 0 4) 최대 공약수 = 4 JAVA CODE 재귀와 유클리드 호제법을 사용해서 최대 공약수를 구하는 코드를 짜보자. public class GCD... </summary> </entry> <entry><title>(Seminar)제어할 수 없는 것에 의존하지 않기</title><link href="https://crispindeity.github.io/posts/(Seminar)%EC%A0%9C%EC%96%B4%ED%95%A0-%EC%88%98-%EC%97%86%EB%8A%94-%EA%B2%83%EC%97%90-%EC%9D%98%EC%A1%B4%ED%95%98%EC%A7%80-%EC%95%8A%EA%B8%B0/" rel="alternate" type="text/html" title="(Seminar)제어할 수 없는 것에 의존하지 않기" /><published>2023-04-23T23:10:00+09:00</published> <updated>2023-04-23T23:10:00+09:00</updated> <id>https://crispindeity.github.io/posts/(Seminar)%EC%A0%9C%EC%96%B4%ED%95%A0-%EC%88%98-%EC%97%86%EB%8A%94-%EA%B2%83%EC%97%90-%EC%9D%98%EC%A1%B4%ED%95%98%EC%A7%80-%EC%95%8A%EA%B8%B0/</id> <content src="https://crispindeity.github.io/posts/(Seminar)%EC%A0%9C%EC%96%B4%ED%95%A0-%EC%88%98-%EC%97%86%EB%8A%94-%EA%B2%83%EC%97%90-%EC%9D%98%EC%A1%B4%ED%95%98%EC%A7%80-%EC%95%8A%EA%B8%B0/" /> <author> <name>crispin</name> </author> <category term="Seminar" /> <summary> 글을 작성하게 된 이유 얼마 전 업무를 진행하면서, 우아한테크세미나 에서 들었던 내용중 이동욱님이 이야기 해주신 내용에 매우 공감하는 부분이 있어 정리하면서 추후 이와같은 실수를 방지하기 위해 작성 제어 할 수 없는 것에 의존하지 않기 간략한 내용 이동욱님 께서 제어할 수 없는것에 의존하지 않기 라는 제목으로 발표를 해주셨는데, 발표 내용중 DB의 PK 값으로 예전에는 주민등록 번호를 종종 사용하였는데 이 부분이 법적으로 수집이 불가능해지면서 사용하는 모든 DB 의 PK 값을 변경해야하는 대대적인 작업을 진행한적이 있다고 말씀해주시면서 의존할 수 없는 것(여기서는 주민번호) 에 의존하게 되면 그 부분에 있어 변경이 발생하는 경우 들어가는 리소스가 매우 많아져서 곤란할 수 있다는 내용이 있었다.... </summary> </entry> <entry><title>(Python)Python 가상환경 설정</title><link href="https://crispindeity.github.io/posts/(Python)Python-%EA%B0%80%EC%83%81%ED%99%98%EA%B2%BD-%EC%84%A4%EC%A0%95/" rel="alternate" type="text/html" title="(Python)Python 가상환경 설정" /><published>2023-01-22T23:22:00+09:00</published> <updated>2023-01-23T02:06:35+09:00</updated> <id>https://crispindeity.github.io/posts/(Python)Python-%EA%B0%80%EC%83%81%ED%99%98%EA%B2%BD-%EC%84%A4%EC%A0%95/</id> <content src="https://crispindeity.github.io/posts/(Python)Python-%EA%B0%80%EC%83%81%ED%99%98%EA%B2%BD-%EC%84%A4%EC%A0%95/" /> <author> <name>crispin</name> </author> <category term="Python" /> <summary> Python 가상환경 설정 Java Spring 만 사용하다, 이번에 새롭게 Python 과 Django 를 배우고 있는데 무엇을 하던지 새로운 환경을 설정하는것은 어렵고 오래걸리는것 같다. 매번 여기저거 검색해서 찾아 다니는 것보단 내가 정리를 해놓는게 더 좋을 것 같아 글을 쓰게 되었다. 가상환경 설정이 필요한 이유 Java 를 사용할때도 jenv 를 사용해서 java 의 버전을 프로젝트마다 따로 설정해서 사용하긴 했는데, Python의 경우에도 프로젝트마다 버전을 달리 사용해야 하는경우도 있고, 프로젝트 마다 필요한 라이브러리들이 다르고 그걸 통합해서 관리하는 것 보단 나눠서 관리하는게 더 편리하다고 느껴 가상환경을 설정해 사용하기로 했다. 가상환경 설정 방법 pyenv 와 v... </summary> </entry> <entry><title>(Spring)@ModelAttribute</title><link href="https://crispindeity.github.io/posts/(Spring)@ModelAttribute/" rel="alternate" type="text/html" title="(Spring)@ModelAttribute" /><published>2022-12-16T12:30:00+09:00</published> <updated>2022-12-16T12:30:00+09:00</updated> <id>https://crispindeity.github.io/posts/(Spring)@ModelAttribute/</id> <content src="https://crispindeity.github.io/posts/(Spring)@ModelAttribute/" /> <author> <name>crispin</name> </author> <category term="Spring" /> <summary> @ModelAttribute 글을 작성하게 된 이유 N 사 모 카페에서 질문 글을 읽어 보던 중, 내가 생각했던 해결방법과 작성자께서 해결하신 해결 방법이 달라 헷갈렸던 내용을 정리하면서, @ModelAttribute 에 대해 정확하게 알고자 작성하게 되었다. 질문 내용으로는 Form 형식으로 데이터를 전송하는 중에 Dto 를 사용해서 전송된 값을 Controller 에서 받고 있는데 그 값이 null 로 들어온다는 내용이였다. 헷갈렸던 내용 @Controller public class Test { @RequestMapping(value = "/create", method = RequestMethod.POST) public String hospicreate(HosSaveRe... </summary> </entry> </feed>
